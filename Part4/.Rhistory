load("C:/Esmaeil/CeliacProject/BackUp/MetaData/MetaData_Esmaeil.Rdata")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Part 6")
unique(full_metadata$Diagnosis)
unique(full_metadata$TRBV)
library(dplyr)
library(ggplot2)
# فیلتر فقط ردیف‌هایی که TRBV28 دارند
trbv28_data <- full_metadata %>%
filter(TRBV == "TRBV28") %>%
filter(Diagnosis %in% c("Healthy", "ACD", "RCD-I", "RCD-II"))
# شمارش تعداد سلول‌ها با TRBV28 در هر بیمار
gene_counts <- trbv28_data %>%
group_by(Diagnosis, Patient) %>%
summarise(count = n(), .groups = "drop")
# نرمال‌سازی نسبت به کل سلول‌های هر بیمار
total_cells <- full_metadata %>%
group_by(Diagnosis, Patient) %>%
summarise(total = n(), .groups = "drop")
# ترکیب دو جدول و محاسبه expression نرمال‌شده
normalized_data <- left_join(gene_counts, total_cells, by = c("Diagnosis", "Patient")) %>%
mutate(norm_expr = count / total)
# حالا رسم boxplot از norm_expr به ازای Diagnosis
ggplot(normalized_data, aes(x = Diagnosis, y = norm_expr, fill = Diagnosis)) +
geom_boxplot(alpha = 0.7) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
labs(
title = "Normalized Expression of TRBV28 across Diagnoses",
x = "Diagnosis Group",
y = "Normalized Expression (TRBV28)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
library(dplyr)
library(ggplot2)
# فیلتر فقط ردیف‌هایی که TRBV28 دارند
trbv28_data <- full_metadata %>%
filter(TRBV == "TRBV28") %>%
filter(Diagnosis %in% c("Healthy", "ACD", "RCD-I", "RCD-II"))
# شمارش تعداد سلول‌ها با TRBV28 در هر بیمار
gene_counts <- trbv28_data %>%
group_by(Diagnosis, Patient) %>%
summarise(count = n(), .groups = "drop")
# نرمال‌سازی نسبت به کل سلول‌های هر بیمار
total_cells <- full_metadata %>%
group_by(Diagnosis, Patient) %>%
summarise(total = n(), .groups = "drop")
# ترکیب و محاسبه expression نرمال‌شده
normalized_data <- left_join(gene_counts, total_cells, by = c("Diagnosis", "Patient")) %>%
mutate(norm_expr = count / total)
# رسم نمودار
p <- ggplot(normalized_data, aes(x = Diagnosis, y = norm_expr, fill = Diagnosis)) +
geom_boxplot(alpha = 0.7) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
labs(
title = "Normalized Expression of TRBV28 across Diagnoses",
x = "Diagnosis Group",
y = "Normalized Expression (TRBV28)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
# چاپ نمودار در R
print(p)
# ذخیره به صورت تصویر
ggsave("TRBV28_expression_boxplot.png", plot = p, width = 8, height = 6, dpi = 300, bg = "white")
library(Seurat)
library(SeuratObject)
library(ggplot2)
library(dplyr)
library(openxlsx)
library(readxl)
library(future)
library(future.apply)
library(MAST)
merged_obj1 = LoadSeuratRds("C:/Esmaeil/irAEsProject/Backup/Part4/3_The Seurat object obtained after First RunUMAP/merged_obj1")
setwd("C:/Esmaeil/irAEsProject/irAEsProject/Part4")
png(filename = "UMAP11.png", width = 8000, height = 4000, units = "px", res = 1200)
DimPlot(merged_obj1, label = TRUE) +
theme(
legend.text = element_text(size = 6),    # smaller legend text
legend.title = element_text(size = 8),   # smaller legend title
legend.key.size = unit(0.3, "cm")        # smaller legend key size (the colored boxes)
)
dev.off()
png(filename = "UMAP1.png", width = 8000, height = 4000, units = "px", res = 1200)
DimPlot(merged_obj1, label = TRUE) +
theme(
legend.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.key.size = unit(0.3, "cm")
)
dev.off()
library(ggforce)
# استخراج داده‌ها برای ترسیم
umap_data <- Embeddings(merged_obj1, reduction = "umap")
umap_df <- as.data.frame(umap_data)
umap_df$cluster <- Idents(merged_obj1)
png(filename = "UMAP2.png", width = 8000, height = 4000, units = "px", res = 1200)
library(ggplot2)
p <- ggplot(umap_df, aes(x = UMAP_1, y = UMAP_2, color = cluster)) +
geom_point(size = 0.5) +
geom_mark_hull(aes(fill = cluster), alpha = 0.2, show.legend = FALSE) +
theme_minimal() +
theme(
legend.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.key.size = unit(0.3, "cm")
) +
guides(color = guide_legend(override.aes = list(size=4)))
print(p)
library(ggforce)
library(ggforce)
umap_data <- Embeddings(merged_obj1, reduction = "umap")
umap_df <- as.data.frame(umap_data)
umap_df$cluster <- Idents(merged_obj1)
png(filename = "UMAP2.png", width = 8000, height = 4000, units = "px", res = 1200)
library(ggplot2)
p <- ggplot(umap_df, aes(x = UMAP_1, y = UMAP_2, color = cluster)) +
geom_point(size = 0.5) +
geom_mark_hull(aes(fill = cluster), alpha = 0.2, show.legend = FALSE) +
theme_minimal() +
theme(
legend.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.key.size = unit(0.3, "cm")
) +
guides(color = guide_legend(override.aes = list(size=4)))
print(p)
umap_data <- Embeddings(merged_obj1, reduction = "umap")
head(umap_data)
colnames(umap_data)
library(ggforce)
library(ggplot2)
umap_data <- Embeddings(merged_obj1, reduction = "umap")
umap_df <- as.data.frame(umap_data)
umap_df$cluster <- Idents(merged_obj1)
png(filename = "UMAP2.png", width = 8000, height = 4000, units = "px", res = 1200)
p <- ggplot(umap_df, aes(x = umap_1, y = umap_2, color = cluster)) +
geom_point(size = 0.5) +
geom_mark_hull(aes(fill = cluster), alpha = 0.2, show.legend = FALSE) +
theme_minimal() +
theme(
legend.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.key.size = unit(0.3, "cm")
) +
guides(color = guide_legend(override.aes = list(size=4)))
print(p)
dev.off()
library(ggalt)
install.packages("ggalt")
library(ggalt)
library(ggplot2)
umap_data <- Embeddings(merged_obj1, reduction = "umap")
umap_df <- as.data.frame(umap_data)
umap_df$cluster <- Idents(merged_obj1)
png(filename = "UMAP2.png", width = 8000, height = 4000, units = "px", res = 1200)
p <- ggplot(umap_df, aes(x = umap_1, y = umap_2, color = cluster)) +
geom_point(size = 0.5) +
geom_encircle(aes(group = cluster, fill = cluster), alpha = 0.2, show.legend = FALSE, color = "black") +
theme_minimal() +
theme(
legend.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.key.size = unit(0.3, "cm")
) +
guides(color = guide_legend(override.aes = list(size=4)))
print(p)
dev.off()
